<?xml version="1.0" encoding="UTF-8"?><?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?><?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?><TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:gcse="http://www.google.com/cse" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:xh="http://www.w3.org/1999/xhtml">
   <teiHeader>
      <fileDesc>
         <titleStmt>
            <title>Schema for content directly authored in HTML</title>
            <author>Martin Holmes</author>
         </titleStmt>
         <publicationStmt>
            <p>Free for any purpose</p>
         </publicationStmt>
         <sourceDesc>
            <p>Created to provide a simplified, constrained RNG and Schematron schema for authoring
               and editing XHTML5 documents in an XML editor such as Oxygen, along with documentation.</p>
            <p>This is originally adapted from the <ref target="https://hcmc.uvic.ca/svn/eb11/schema/eb11.odd">ODD file in the EB11 project</ref>.</p>
         </sourceDesc>
      </fileDesc>
   </teiHeader>
   <text>
      <front xml:id="frontMatter">
         <titlePage>
            <docTitle>
               <titlePart type="main">XHTML5-as-ODD Project</titlePart>
               <titlePart type="sub">Manual for authors and editors of direct-to-HTML website content</titlePart>
            </docTitle>
            <docAuthor>Martin Holmes</docAuthor>
            <docDate>2023</docDate>
         </titlePage>
         <p>This collection of pages provides documentation and encoding examples for the authors and 
         editors of the front-end HTML pages for projects using XHTML5 as the primary data encoding format.</p>
         <divGen type="toc"/>
      </front>
      <body>
         <div xml:id="intro">
            <head>Introduction</head>
            
            <p>The VNU validator (https://github.com/validator/validator/) is a wonderful tool, but it does not serve regular project purposes well. Generally speaking, for projects whose data source format is XHTML5, what is needed is a much smaller, tighter schema which can be used to enforce not only general XHTML5 validity but also project-specific rules. HTML5 is a large and growing standard, and most projects will only use a fraction of the elements and attributes available. The VNU validator contains RNC schema files for XHTML5, but those files are dependent on a datatype library which is distributed only in the form of large Java files with a lot of other content.</p>
            <p>So while using the VNU validator as a final check of a website produced from a build process is essential, for encoders working on content in XHTML5, a much more specific schema is very helpful, and in several projects created at HCMC<note>Examples: <ref target="https://eb11.uvic.ca">Then &amp; Now</ref>, <ref target="https://hcmc.uvic.ca/journal/public/">The HCMC Journal</ref>, <ref target="https://johnkeats.uvic.ca">Mapping Keats’s Progress: A Critical Chronology</ref>.</note> I have already created such schemas. To do this I used the <ref target="https://tei-c.org/guidelines/customization/getting-started-with-p5-odds/">TEI ODD</ref> specification. The ODD specification is intended primarily for producing customizations of the TEI schema, but it can be used to create any other kind of XML schema and documentation. See my article in the Journal of the TEI<note>Martin Holmes. 2021. <title level="a">Using ODD for HTML.</title> <title level="j">The Journal of the Text Encoding Initiative</title>. Text Encoding Initiative Consortium. 2021. <ref target="https://journals.openedition.org/jtei/3106">https://journals.openedition.org/jtei/3106</ref>.</note> for more information on how odd can be used for HTML.</p>
            
            <p>The purpose of this project, then, is to slowly and steadily build a general-purpose XHTML5 schema which includes all of the components (elements, attributes, and constraints) required by projects using XHTML5 as a data format, to provide a clean and simple starting point for future projects. As this schema grows, projects will probably need to apply customizations to it, removing things they don't need, and possibily adding their own customizations such as Schematron rules specific to their project. This can be done with TEI ODD chaining.</p>
            
         </div>
      </body>
      <back>
         <div>
           <!-- We allow multiple starting elements for our schema so that we can 
                validate articles and page-component fragments in their own 
                discrete files, while also validating full pages created from them. -->
            <schemaSpec ident="xhtml5-as-odd" prefix="xh_" start="html body main article" ns="http://www.w3.org/1999/xhtml">
               <!-- Include the TEI tei module so we can use datatypes etc. We may change to 
                    direct use of xsd datatypes at some point. -->
               <moduleRef key="tei"/>
               
               
               <moduleSpec ident="xhtml5-as-odd">
                  <desc>Base schema module for all xhtml5-as-odd elements defined in this ODD.</desc>
               </moduleSpec>
               
               <elementSpec ident="main" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>The main element, containing block content</gloss>
                  <desc>This is used as the root element for some content documents.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <elementRef key="div"/>
                           <elementRef key="dialog"/>
                           <elementRef key="article" maxOccurs="2"/>
                        </alternate>
                        <!-- We allow script here for staticSearch overrides. -->
                        <elementRef key="script" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="article" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>The principal container element, containing block content</gloss>
                  <desc>This is the root element for article documents.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h2"/>
                        <alternate minOccurs="1" maxOccurs="unbounded">
                           <macroRef key="macro.xaoBlockContent"/>
                           <elementRef key="section" minOccurs="1" maxOccurs="unbounded"/>
                        </alternate>
                     </sequence>
                  </content>
                  <attList>
                     <attDef ident="data-shortname">
                        <gloss>This is a simplified name of the poet used in the case of very long poet names.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               
               <elementSpec ident="section" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>A subsection of a page</gloss>
                  <desc>If using sections, there must be at least two.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" maxOccurs="1"/>
                        <macroRef key="macro.xaoBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>
               
               <elementSpec ident="div" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>A division of the footer element or the search page.</gloss>
                  <desc>The div may be the main child of the main element.</desc>
                  <classes>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="h3" minOccurs="0" maxOccurs="1"/>
                        <alternate minOccurs="1" maxOccurs="1">
                           <elementRef key="p"/>
                           <elementRef key="div"/>
                           <macroRef key="macro.xaoBlockContent"/>
                        </alternate>
                     </sequence>
                     
                  </content>
               </elementSpec>
               
               <elementSpec ident="h2" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>Main page  heading</gloss>
                  <desc>The h2 (level 2 heading) element provides the heading for 
                  article content.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockHeading"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasTitle"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
                  <constraintSpec ident="modernArticleMustHaveAuthor" scheme="schematron">
                     <constraint>
                        <sch:rule context="xh:article[starts-with(@id, 'mod_')][count(descendant::xh:p) gt 1]/xh:h2">
                           <sch:assert test="descendant::xh:a[@href][@data-nametype='persName']"> 
                              The heading for a modern article must contain a link to the name of 
                              its author.
                           </sch:assert>
                        </sch:rule>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <elementSpec ident="h3" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>Section heading</gloss>
                  <desc>The h3 (level 3 heading) element provides the heading for 
                  sections (if any) inside the main element.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockHeading"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="p" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Prose paragraph.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="details" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Expandable details element with summary child.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="summary"/>
                        <macroRef key="macro.xaoBlockContent"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="summary" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Single-line summary for details element.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="blockquote" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Block quotation.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="ul"/>
                        <elementRef key="br"/>
                        <macroRef key="macro.xaoParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="q" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Inline quotation. In rendering, quotation marks will be supplied, so do not
                     include them.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="br"/>
                        <macroRef key="macro.xaoParaContent"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="ul" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Unordered list, usually bulleted.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
                  <attList>
                     <attDef ident="class" mode="change">
                        <valList mode="add">
                           <valItem ident="referenceList">
                              <gloss>A reference list at the end of an article.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="ol" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Ordered list, usually numbered.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <elementRef key="li" minOccurs="1" maxOccurs="unbounded"/>
                  </content>
               </elementSpec>
               <elementSpec ident="li" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Item in a list or a menu.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <elementRef key="ul"/>
                        <elementRef key="ol"/>
                        <elementRef key="p"/>
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="pre" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Preformatted text which is to be presented exactly as written in the HTML file.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                  </classes>
                  <content>
                     <textNode/>
                  </content>
               </elementSpec>
               <elementSpec ident="span" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>General-purpose phrase-level element. Use only if there is no more specific
                     alternative for what you want.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasLang"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
                  <!-- NOTE: Leaving this in place, but we expect this to be 
                   changed or expanded. -->
                  <constraintSpec ident="spansMustHavenametypeStyleOrClass" scheme="schematron">
                     <constraint>
                        <sch:assert test="@class or @style or @data-nametype"> 
                           A span element must have a class attribute, a data-nametype attribute, or a style attribute.
                        </sch:assert>
                     </constraint>
                  </constraintSpec>
               </elementSpec>
               <elementSpec ident="strong" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>Strong text</gloss>
                  <desc>Text that needs to be highlighted because it is important; will be rendered by
                     default in bold.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="code" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <gloss>Inline computer code, filenames etc.</gloss>
                  <desc>Inline text which is computer code or similar text such as identifiers.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="img" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Image element. May be rendered inline or as a block, depending on where it
                     appears in the document structure.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <constraintSpec ident="imgWithoutCaptionNeedsAlt" scheme="schematron">
                     <constraint>
                        <!--<sch:ns uri="http://www.w3.org/1999/xhtml" prefix="xh"/>-->
                        <sch:assert test="@alt or following-sibling::xh:figcaption or ancestor::xh:ul[@class='gallery']"> 
                           If your img element is not inside a figure element with a figcaption, 
                           then it requires the @alt attribute to provide help for visually-impaired users.
                        </sch:assert>
                     </constraint>
                  </constraintSpec>
                  <attList>
                     <attDef ident="width" usage="opt">
                        <desc>Width in pixels of the image.</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                     <attDef ident="height" usage="opt">
                        <desc>Height in pixels of the image</desc>
                        <datatype>
                           <dataRef key="teidata.numeric"/>
                        </datatype>
                     </attDef>
                     <attDef ident="src" usage="req">
                        <gloss>path to the image (usually a relative path)</gloss>
                        <datatype>
                           <dataRef key="teidata.pointer"/>
                        </datatype>
                     </attDef>
                     <attDef ident="alt" usage="opt">
                        <gloss>description of the image for visually-impaired users. If not supplied,
                        then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="title" usage="opt">
                        <gloss>description of the image which will pop up on mouseover. If not supplied,
                           then figcaption will be used instead.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="em" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Emphasized text; will be rendered by default in italics.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="u" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Underlined text, in a context where we do not wish to conjecture 
                  why the underline is there (in an original article, or a quotation of 
                  an external source).</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <macroRef key="macro.xaoParaContent"/>
                        <elementRef key="br"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="a" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.hasHref"/>
                     <memberOf key="att.hasnametype"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <gloss>explanation of what is being linked to. Will pop up when
                        mousing over the link.</gloss>
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                     <attDef ident="target" usage="opt">
                        <valList type="closed">
                           <valItem ident="_blank">
                              <gloss>Open this link in a new window or tab.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="dialog" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>An HTML dialog element</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <alternate minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="p"/>
                        <elementRef key="figure"/>
                        <elementRef key="div"/>
                     </alternate>
                  </content>
               </elementSpec>
               <elementSpec ident="cite" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>An HTML cite element</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               
               <elementSpec ident="figure" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A figure consists of an image and a caption.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <alternate>
                        <elementRef key="p" minOccurs="1" maxOccurs="unbounded"/>
                        <sequence>
                        <elementRef key="img"/>
                        <elementRef key="figcaption" minOccurs="0"/>
                     </sequence>
                     </alternate>
                     
                  </content>
                  <attList>
                     <attDef ident="class" mode="change" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="leftFloat">
                              <gloss>Float this figure to the left and flow the text around it.</gloss>
                           </valItem>
                           <valItem ident="center">
                              <gloss>Centre this figure and do not float text around it.</gloss>
                           </valItem>
                           <valItem ident="rightFloat">
                              <gloss>Float this figure to the right and flow the text around it.</gloss>
                           </valItem>
                           <valItem ident="lightbox-figure">
                              <gloss>Used for a figure which appears in the ad gallery.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                     
                  </attList>
               </elementSpec>
               <elementSpec ident="br" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A hard-coded linebreak. Avoid unless you absolutely need it. Use it at the 
                  end of lines in poems.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                  </classes>
                  <content>
                     <empty/>
                  </content>
               </elementSpec>
               <elementSpec ident="figcaption" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>Caption for an image in a figure element.</desc>
                  <classes>
                     <memberOf key="model.xaoPhrase"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="td" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A table data cell.</desc>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="button" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>An HTML button element.</desc>
                  <classes>
                     <memberOf key="model.xaoBlockBody"/>
                     <memberOf key="att.classable"/>
                     <memberOf key="att.identifiable"/>
                     <memberOf key="att.hasTabindex"/>
                  </classes>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="th" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A table label or heading cell.</desc>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
                  <attList>
                     <attDef ident="scope" usage="opt">
                        <valList type="closed">
                           <valItem ident="col">
                              <gloss>Scope of this heading is the column below it.</gloss>
                           </valItem>
                           <valItem ident="row">
                              <gloss>Scope of this heading is the row to the right of it.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </elementSpec>
               <elementSpec ident="tr" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A table row.</desc>
                  <content>
                     <sequence minOccurs="1" maxOccurs="unbounded">
                        <elementRef key="th" minOccurs="0" maxOccurs="unbounded"/>
                        <elementRef key="td" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <elementSpec ident="caption" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A table caption.</desc>
                  <content>
                     <macroRef key="macro.xaoParaContent"/>
                  </content>
               </elementSpec>
               <elementSpec ident="table" ns="http://www.w3.org/1999/xhtml" module="xhtml5-as-odd">
                  <desc>A table.</desc>
                  <classes>
                     <memberOf key="att.classable"/>
                     <memberOf key="model.xaoBlockBody"/>
                  </classes>
                  <content>
                     <sequence>
                        <elementRef key="caption" minOccurs="0" maxOccurs="1"/>
                        <elementRef key="tr" minOccurs="1" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </elementSpec>
               <macroSpec ident="macro.xaoParaContent" module="xhtml5-as-odd">
                  <desc>Content model for paragraph-type containers such as paragraphs, list items, and
                     so on.</desc>
                  <content>
                     <alternate minOccurs="0" maxOccurs="unbounded">
                        <textNode/>
                        <classRef key="model.xaoPhrase"/>
                     </alternate>
                  </content>
               </macroSpec>
               <macroSpec ident="macro.xaoBlockContent" module="xhtml5-as-odd">
                  <desc>Content model for div container.</desc>
                  <content>
                     <sequence>
                        <classRef key="model.xaoBlockHeading" minOccurs="0" maxOccurs="unbounded"/>
                        <classRef key="model.xaoBlockBody" minOccurs="0" maxOccurs="unbounded"/>
                     </sequence>
                  </content>
               </macroSpec>
               <classSpec type="model" ident="model.xaoPhrase" module="xhtml5-as-odd">
                  <desc>Groups elements which can appear at the phrase level.</desc>
               </classSpec>
               <classSpec type="model" ident="model.xaoBlockBody" module="xhtml5-as-odd">
                  <desc>Groups elements which can appear below the heading in an article or section.</desc>
               </classSpec>
               
               <classSpec ident="att.hasLang" type="atts" module="xhtml5-as-odd">
                  <desc>Groups elements which may have a language attribute.</desc>
                  <attList>
                     <attDef ident="lang" usage="opt">
                        <gloss>Specifies the language of the content of the element.</gloss>
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.word"/>
                        </datatype>
                        <valList type="semi">
                           <valItem ident="en"><gloss>English</gloss></valItem>
                           <valItem ident="fr"><gloss>French</gloss></valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec type="atts" ident="att.classable" module="xhtml5-as-odd">
                  <desc>Groups elements which can have a class attribute.</desc>
                  <attList>
                     <attDef ident="class" usage="opt">
                        <gloss>The class attribute provides styles through rules in the CSS
                        stylesheet. </gloss>
                        <datatype maxOccurs="unbounded">
                           <dataRef key="teidata.word"/>
                        </datatype>
                     </attDef>
                     <attDef ident="style" usage="opt">
                        <gloss>The style attribute provides one-off style options for specific
                        and unusual cases. Do not use this unless you know that the element
                        you're styling is unlike any other element on the site.</gloss>
                        <datatype maxOccurs="1">
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.identifiable" module="xhtml5-as-odd">
                  <desc>Groups elements which may have an id attribute.</desc>
                  <attList>
                     <attDef ident="id" usage="opt">
                        <datatype>
                           <dataRef name="ID"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.hasnametype" module="xhtml5-as-odd">
                  <gloss>Groups elements which have the @data-nametype attribute.</gloss>
                  <attList>
                     <attDef ident="data-nametype" usage="opt">
                        <valList type="closed" mode="add">
                           <valItem ident="monographTitle">
                              <gloss>Book or play title (will be italicized)</gloss>
                           </valItem>
                          <valItem ident="periodicalTitle">
                            <gloss>Title of newspaper, magazine, or journal (will be italicized)</gloss>
                          </valItem>
                           <valItem ident="periodicalTitle">
                              <gloss>Periodical title (will be italicized)</gloss>
                           </valItem>
                           <valItem ident="poemTitle">
                              <gloss>Poem title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="songTitle">
                              <gloss>Song title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="italicPoemTitle">
                              <gloss>Poem title as presented in EB11 (in italics rather than quotes)</gloss>
                           </valItem>
                           <valItem ident="italicEssayTitle">
                              <gloss>Essay or article title as presented in EB11 (in italics rather than quotes)</gloss>
                           </valItem>
                           <valItem ident="italicSongTitle">
                              <gloss>Song title as presented in EB11 (in italics rather than quotes)</gloss>
                           </valItem>
                           <valItem ident="articleTitle">
                              <gloss>Article title (will be surrounded with quotes)</gloss>
                           </valItem>
                           <valItem ident="foreign">
                              <gloss>Text in a foreign language (will be italicized)</gloss>
                           </valItem>
                           <valItem ident="persName">
                              <gloss>The name of a person</gloss>
                           </valItem>
                           <valItem ident="surname">
                              <gloss>The surname of a person, usually inside a persName.</gloss>
                           </valItem>
                        </valList>
                     </attDef>
                  </attList>
               </classSpec>
               <classSpec type="atts" ident="att.formatted" module="xhtml5-as-odd">
                  <gloss>Groups elements which have the ... TODO...</gloss>
               </classSpec>
              
              <classSpec type="atts" ident="att.hasHref" module="xhtml5-as-odd">
                <gloss>Groups elements which have the <att>href</att> attribute.</gloss>
                <attList>
                  <attDef ident="href" usage="req">
                    <datatype>
                      <dataRef key="teidata.pointer"/>
                    </datatype>
                  </attDef>
                </attList>
              </classSpec>
               
               <classSpec type="atts" ident="att.hasTitle" module="xhtml5-as-odd">
                  <gloss>Groups elements which have the <att>title</att> attribute.</gloss>
                  <attList>
                     <attDef ident="title" usage="opt">
                        <datatype>
                           <dataRef key="teidata.text"/>
                        </datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <classSpec type="atts" ident="att.hasTabindex" module="xhtml5-as-odd">
                  <gloss>Groups elements which have the <att>tabindex</att> attribute.</gloss>
                  <attList>
                     <attDef ident="tabindex" usage="opt">
                        <datatype><dataRef key="nonNegativeInteger"/></datatype>
                     </attDef>
                  </attList>
               </classSpec>
               
               <!--        Global Schematron constraints    -->
               <constraintSpec ident="schVariables" scheme="schematron">
                  <constraint>
                     <sch:ns uri="http://www.w3.org/1999/xhtml" prefix="xh"/>
                     <sch:pattern>
                        <sch:let name="smartDouble" value="'[“”]'"/>
                        <sch:let name="smartSingle" value="'[‘’]'"/>
                        <sch:let name="straightDouble" value="'&#34;'"/>
                        <sch:let name="straightApos" value="''''"/>
                        <sch:let name="straightQuotes" value="concat('[', $straightDouble, $straightApos, ']')"/>
                     </sch:pattern>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noQuotesInText" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[text()][not(ancestor-or-self::xh:script or ancestor-or-self::xh:style or ancestor-or-self::xh:code or ancestor-or-self::xh:pre)]">
                        <sch:assert test="not(text()[matches(., $straightQuotes)])">
                           Do not use straight quotes in text. Use the q or 
                           span elements wherever possible; for apostrophes, 
                           use the smart version (’).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="onlyPermittedImgAttributes" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:img">
                        <sch:assert test="every $att in @* satisfies local-name($att) = ('src', 'alt', 'title', 'width', 'height', 'id', 'style', 'class')">
                           Only the following attributes are allowed on img: 'src', 'alt', 'title', 'id', 'style', 'class', 'width' and 'height'.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noBadImageFilenames" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:img">
                        <sch:assert test="matches(@src, '^[a-zA-Z0-9/\._\-]+$')">
                           Image file paths must be well-formed (no spaces or punctuation).
                        </sch:assert>
                        <sch:assert test="matches(@src, '^(images/)|(neighbourhoodMaps/)|(gallery/)')">
                           Image file paths must begin with images/, neighbourhoodMaps/, or gallery/.
                        </sch:assert>
                        <sch:assert test="not(@data-lg-version) or matches(@data-lg-version, '^(images/)|(neighbourhoodMaps/)|(gallery/)')">
                           Image file paths must begin with images/, neighbourhoodMaps/, or gallery/.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="spacesAfterPeriods" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '[^\.A-Z]\.[A-Z]')])">
                           Don't forget to put a space after every period.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noSpacedPeriodEllipses" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\s*\.\s*\.')])">
                           Don't use literal periods to create an ellipsis. Use the 
                           ellipsis character (…, Control + Shift + period) instead.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noSpacesInHrefs" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(matches(@href, '\s+'))">
                           There should be no spaces in href attributes (links).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noLinksInH3s" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:h3">
                        <sch:assert test="not(xh:a[@href])">
                           Don't place links inside h3 elements.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="noLinksInLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a">
                        <sch:assert test="not(descendant::xh:a[@href])">
                           Don't place links inside other links.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <constraintSpec ident="periodsAndCommasOutsideLinks" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:a[@href]">
                        <sch:assert test="not(matches(., '[\.,:;]\s*$')) or matches(., '((Esq\.)|(A\.\s*W\.)|(\.\s*\.\s*\.))$')">
                           Don't include trailing periods and commas inside link text.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               <!-- Excessive style constraint? -->
               <constraintSpec ident="useProperEllipsis" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:*[not(self::xh:code or self::xh:pre)][text()]">
                        <sch:assert test="not(text()[matches(., '\.\.\.')])">
                           Use an ellipsis (…) rather than three periods.
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
               
               <constraintSpec ident="xao-idShouldMatchFilename" scheme="schematron">
                  <constraint>
                     <sch:rule context="xh:article">
                        <sch:let name="fname" value="concat(@id, '.xml')"/>
                        <sch:assert test="ends-with(document-uri(/), $fname)">
                           ERROR: The @id of your document (<sch:value-of select="@id"/>) 
                           does not match the document file name (<sch:value-of select="document-uri(/)"/>).
                        </sch:assert>
                     </sch:rule>
                  </constraint>
               </constraintSpec>
            </schemaSpec>
         </div>
      </back>
   </text>
</TEI>